(function(a){"use strict";if("undefined"==typeof sigma)throw new Error("sigma is not declared");var b=Object.create(null);sigma.classes.graph.attach("addNode","sigma.helpers.graph.addNode",function(a){a.fixed&&(b[a.id]=this.nodesIndex[a.id])}),sigma.classes.graph.attachBefore("dropNode","sigma.helpers.graph.dropNode",function(a){delete b[a]}),sigma.classes.graph.attachBefore("clear","sigma.helpers.graph.clear",function(){var a;for(a in b)"hasOwnProperty"in b&&!b.hasOwnProperty(a)||delete b[a];b=Object.create(null)}),sigma.classes.graph.hasMethod("fixNode")||sigma.classes.graph.addMethod("fixNode",function(a){return this.nodesIndex[a]&&(this.nodesIndex[a].fixed=!0,b[a]=this.nodesIndex[a]),this}),sigma.classes.graph.hasMethod("unfixNode")||sigma.classes.graph.addMethod("unfixNode",function(a){return this.nodesIndex[a]&&(delete this.nodesIndex[a].fixed,delete b[a]),this}),sigma.classes.graph.hasMethod("getFixedNodes")||sigma.classes.graph.addMethod("getFixedNodes",function(){var a,c=[];for(a in b)c.push(this.nodesIndex[a]);return c}),sigma.classes.graph.hasMethod("dropNodes")||sigma.classes.graph.addMethod("dropNodes",function(a){if(arguments.length>1)throw new Error("Too many arguments. Use an array instead.");if("string"==typeof a||"number"==typeof a)this.dropNode(a);else{if(!Array.isArray(a))throw new TypeError('Invalid argument: "v" is not a string, a number, or an array, was '+a);var b,c;for(b=0,c=a.length;c>b;b++){if("string"!=typeof a[b]&&"number"!=typeof a[b])throw new TypeError("Invalid argument: a node id is not a string or a number, was "+a[b]);this.dropNode(a[b])}}return this}),sigma.classes.graph.hasMethod("dropEdges")||sigma.classes.graph.addMethod("dropEdges",function(a){if(arguments.length>1)throw new Error("Too many arguments. Use an array instead.");if("string"==typeof a||"number"==typeof a)this.dropEdge(a);else{if(!Array.isArray(a))throw new TypeError("Invalid argument: it is not a string, a number, or an array, was "+a);var b,c;for(b=0,c=a.length;c>b;b++){if("string"!=typeof a[b]&&"number"!=typeof a[b])throw new TypeError("Invalid argument: an edge id is not a string or a number, was "+a[b]);this.dropEdge(a[b])}}return this}),sigma.classes.graph.hasMethod("adjacentNodes")||sigma.classes.graph.addMethod("adjacentNodes",function(a,b){if(b=b||{},b.withHidden=2==arguments.length?b.withHidden:!0,"string"!=typeof a&&"number"!=typeof a)throw new TypeError("The node id is not a string or a number, was "+a);var c,d,e=this,f=[];for(c in this.allNeighborsIndex[a])b.withHidden?f.push(this.nodesIndex[c]):this.nodes(c).hidden||(d=0!=Object.keys(this.allNeighborsIndex[a][c]).map(function(a){return e.edges(a)}).filter(function(a){return!a.hidden}).length,d&&f.push(this.nodesIndex[c]));return f}),sigma.classes.graph.hasMethod("adjacentEdges")||sigma.classes.graph.addMethod("adjacentEdges",function(a,b){if(b=b||{},b.withHidden=2==arguments.length?b.withHidden:!0,"string"!=typeof a&&"number"!=typeof a)throw new TypeError("The node id is not a string or a number, was "+a);var c,d,e=this.allNeighborsIndex[a],f=[];for(d in e)for(c in e[d])(b.withHidden||!this.edges(c).hidden)&&f.push(e[d][c]);return f})}).call(this);
//# sourceMappingURL=sigma.helpers.graph.min.js.map